import { OAuth2Client, JWT, Compute, UserRefreshClient } from 'google-auth-library';
import { GoogleConfigurable, MethodOptions, GlobalOptions, BodyResponseCallback, APIRequestContext } from 'googleapis-common';
import { GaxiosPromise } from 'gaxios';
export declare namespace admin_reports_v1 {
    export interface Options extends GlobalOptions {
        version: 'reports_v1';
    }
    interface StandardParameters {
        /**
         * Data format for the response.
         */
        alt?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint?: boolean;
        /**
         * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Deprecated. Please use quotaUser instead.
         */
        userIp?: string;
    }
    /**
     * Admin Reports API
     *
     * Fetches reports for the administrators of G Suite customers about the usage, collaboration, security, and risk for their users.
     *
     * @example
     * const {google} = require('googleapis');
     * const admin = google.admin('reports_v1');
     *
     * @namespace admin
     * @type {Function}
     * @version reports_v1
     * @variation reports_v1
     * @param {object=} options Options for Admin
     */
    export class Admin {
        context: APIRequestContext;
        activities: Resource$Activities;
        channels: Resource$Channels;
        customerUsageReports: Resource$Customerusagereports;
        entityUsageReports: Resource$Entityusagereports;
        userUsageReport: Resource$Userusagereport;
        constructor(options: GlobalOptions, google?: GoogleConfigurable);
    }
    /**
     * JSON template for a collection of activites.
     */
    export interface Schema$Activities {
        /**
         * ETag of the resource.
         */
        etag?: string | null;
        /**
         * Each activity record in the response.
         */
        items?: Schema$Activity[];
        /**
         * The type of API resource. For an activity report, the value is reports#activities.
         */
        kind?: string | null;
        /**
         * Token for retrieving the follow-on next page of the report. The nextPageToken value is used in the request&#39;s pageToken query string.
         */
        nextPageToken?: string | null;
    }
    /**
     * JSON template for the activity resource.
     */
    export interface Schema$Activity {
        /**
         * User doing the action.
         */
        actor?: {
            callerType?: string;
            email?: string;
            key?: string;
            profileId?: string;
        } | null;
        /**
         * ETag of the entry.
         */
        etag?: string | null;
        /**
         * Activity events in the report.
         */
        events?: Array<{
            name?: string;
            parameters?: Array<{
                boolValue?: boolean;
                intValue?: string;
                messageValue?: {
                    parameter?: Schema$NestedParameter[];
                };
                multiIntValue?: string[];
                multiMessageValue?: Array<{
                    parameter?: Schema$NestedParameter[];
                }>;
                multiValue?: string[];
                name?: string;
                value?: string;
            }>;
            type?: string;
        }> | null;
        /**
         * Unique identifier for each activity record.
         */
        id?: {
            applicationName?: string;
            customerId?: string;
            time?: string;
            uniqueQualifier?: string;
        } | null;
        /**
         * IP address of the user doing the action. This is the Internet Protocol (IP) address of the user when logging into G Suite which may or may not reflect the user&#39;s physical location. For example, the IP address can be the user&#39;s proxy server&#39;s address or a virtual private network (VPN) address. The API supports IPv4 and IPv6.
         */
        ipAddress?: string | null;
        /**
         * The type of API resource. For an activity report, the value is audit#activity.
         */
        kind?: string | null;
        /**
         * This is the domain that is affected by the report&#39;s event. For example domain of Admin console or the Drive application&#39;s document owner.
         */
        ownerDomain?: string | null;
    }
    /**
     * An notification channel used to watch for resource changes.
     */
    export interface Schema$Channel {
        /**
         * The address where notifications are delivered for this channel.
         */
        address?: string | null;
        /**
         * Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.
         */
        expiration?: string | null;
        /**
         * A UUID or similar unique string that identifies this channel.
         */
        id?: string | null;
        /**
         * Identifies this as a notification channel used to watch for changes to a resource, which is &quot;api#channel&quot;.
         */
        kind?: string | null;
        /**
         * Additional parameters controlling delivery channel behavior. Optional.
         */
        params?: {
            [key: string]: string;
        } | null;
        /**
         * A Boolean value to indicate whether payload is wanted. Optional.
         */
        payload?: boolean | null;
        /**
         * An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.
         */
        resourceId?: string | null;
        /**
         * A version-specific identifier for the watched resource.
         */
        resourceUri?: string | null;
        /**
         * An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.
         */
        token?: string | null;
        /**
         * The type of delivery mechanism used for this channel.
         */
        type?: string | null;
    }
    /**
     * JSON template for a parameter used in various reports.
     */
    export interface Schema$NestedParameter {
        /**
         * Boolean value of the parameter.
         */
        boolValue?: boolean | null;
        /**
         * Integer value of the parameter.
         */
        intValue?: string | null;
        /**
         * Multiple boolean values of the parameter.
         */
        multiBoolValue?: boolean[] | null;
        /**
         * Multiple integer values of the parameter.
         */
        multiIntValue?: string[] | null;
        /**
         * Multiple string values of the parameter.
         */
        multiValue?: string[] | null;
        /**
         * The name of the parameter.
         */
        name?: string | null;
        /**
         * String value of the parameter.
         */
        value?: string | null;
    }
    /**
     * JSON template for a usage report.
     */
    export interface Schema$UsageReport {
        /**
         * The date of the report request.
         */
        date?: string | null;
        /**
         * Information about the type of the item.
         */
        entity?: {
            customerId?: string;
            entityId?: string;
            profileId?: string;
            type?: string;
            userEmail?: string;
        } | null;
        /**
         * ETag of the resource.
         */
        etag?: string | null;
        /**
         * The type of API resource. For a usage report, the value is admin#reports#usageReport.
         */
        kind?: string | null;
        /**
         * Parameter value pairs for various applications. For the Customers usage report parameters and values, see the customer usage parameters reference.
         */
        parameters?: Array<{
            boolValue?: boolean;
            datetimeValue?: string;
            intValue?: string;
            msgValue?: Array<{
                [key: string]: any;
            }>;
            name?: string;
            stringValue?: string;
        }> | null;
    }
    export interface Schema$UsageReports {
        /**
         * ETag of the resource.
         */
        etag?: string | null;
        /**
         * The type of API resource. For a usage report, the value is admin#reports#usageReports.
         */
        kind?: string | null;
        /**
         * Token to specify next page. A report with multiple pages has a nextPageToken property in the response. For your follow-on requests getting all of the report&#39;s pages, enter the nextPageToken value in the pageToken query string.
         */
        nextPageToken?: string | null;
        /**
         * Various application parameter records.
         */
        usageReports?: Schema$UsageReport[];
        /**
         * Warnings, if any.
         */
        warnings?: Array<{
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        }> | null;
    }
    export class Resource$Activities {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * reports.activities.list
         * @desc Retrieves a list of activities for a specific customer's account and application such as the Admin console application or the Google Drive application. For more information, see the guides for administrator and Google Drive activity reports. For more information about the activity report's parameters, see the activity parameters reference guides.
         * @alias reports.activities.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.actorIpAddress The Internet Protocol (IP) Address of host where the event was performed. This is an additional way to filter a report's summary using the IP address of the user whose activity is being reported. This IP address may or may not reflect the user's physical location. For example, the IP address can be the user's proxy server's address or a virtual private network (VPN) address. This parameter supports both IPv4 and IPv6 address versions.
         * @param {string} params.applicationName Application name for which the events are to be retrieved.
         * @param {string=} params.customerId The unique ID of the customer to retrieve data for.
         * @param {string=} params.endTime Sets the end of the range of time shown in the report. The date is in the RFC 3339 format, for example 2010-10-28T10:26:35.000Z. The default value is the approximate time of the API request. An API report has three basic time concepts:   - Date of the API's request for a report: When the API created and retrieved the report.  - Report's start time: The beginning of the timespan shown in the report. The startTime must be before the endTime (if specified) and the current time when the request is made, or the API returns an error.  - Report's end time: The end of the timespan shown in the report. For example, the timespan of events summarized in a report can start in April and end in May. The report itself can be requested in August.  If the endTime is not specified, the report returns all activities from the startTime until the current time or the most recent 180 days if the startTime is more than 180 days in the past.
         * @param {string=} params.eventName The name of the event being queried by the API. Each eventName is related to a specific G Suite service or feature which the API organizes into types of events. An example is the Google Calendar events in the Admin console application's reports. The Calendar Settings type structure has all of the Calendar eventName activities reported by the API. When an administrator changes a Calendar setting, the API reports this activity in the Calendar Settings type and eventName parameters. For more information about eventName query strings and parameters, see the list of event names for various applications above in applicationName.
         * @param {string=} params.filters The filters query string is a comma-separated list. The list is composed of event parameters that are manipulated by relational operators. Event parameters are in the form [parameter1 name][relational operator][parameter1 value],[parameter2 name][relational operator][parameter2 value],...  These event parameters are associated with a specific eventName. An empty report is returned if the filtered request's parameter does not belong to the eventName. For more information about eventName parameters, see the list of event names for various applications above in applicationName.  In the following Admin Activity example, the <> operator is URL-encoded in the request's query string (%3C%3E): GET...&eventName=CHANGE_CALENDAR_SETTING &filters=NEW_VALUE%3C%3EREAD_ONLY_ACCESS  In the following Drive example, the list can be a view or edit event's doc_id parameter with a value that is manipulated by an 'equal to' (==) or 'not equal to' (<>) relational operator. In the first example, the report returns each edited document's doc_id. In the second example, the report returns each viewed document's doc_id that equals the value 12345 and does not return any viewed document's which have a doc_id value of 98765. The <> operator is URL-encoded in the request's query string (%3C%3E):  GET...&eventName=edit&filters=doc_id GET...&eventName=view&filters=doc_id==12345,doc_id%3C%3E98765  The relational operators include:   - == - 'equal to'.  - <> - 'not equal to'. It is URL-encoded (%3C%3E).  - < - 'less than'. It is URL-encoded (%3C).  - <= - 'less than or equal to'. It is URL-encoded (%3C=).  - > - 'greater than'. It is URL-encoded (%3E).  - >= - 'greater than or equal to'. It is URL-encoded (%3E=).   Note: The API doesn't accept multiple values of a parameter. If a particular parameter is supplied more than once in the API request, the API only accepts the last value of that request parameter. In addition, if an invalid request parameter is supplied in the API request, the API ignores that request parameter and returns the response corresponding to the remaining valid request parameters. If no parameters are requested, all parameters are returned.
         * @param {integer=} params.maxResults Determines how many activity records are shown on each response page. For example, if the request sets maxResults=1 and the report has two activities, the report has two pages. The response's nextPageToken property has the token to the second page. The maxResults query string is optional in the request. The default value is 1000.
         * @param {string=} params.orgUnitID ID of the organizational unit to report on. Activity records will be shown only for users who belong to the specified organizational unit. Data before Dec 17, 2018 doesn't appear in the filtered results.
         * @param {string=} params.pageToken The token to specify next page. A report with multiple pages has a nextPageToken property in the response. In your follow-on request getting the next page of the report, enter the nextPageToken value in the pageToken query string.
         * @param {string=} params.startTime Sets the beginning of the range of time shown in the report. The date is in the RFC 3339 format, for example 2010-10-28T10:26:35.000Z. The report returns all activities from startTime until endTime. The startTime must be before the endTime (if specified) and the current time when the request is made, or the API returns an error.
         * @param {string} params.userKey Represents the profile ID or the user email for which the data should be filtered. Can be all for all information, or userKey for a user's unique G Suite profile ID or their primary email address.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Activities$List, options?: MethodOptions): GaxiosPromise<Schema$Activities>;
        list(params: Params$Resource$Activities$List, options: MethodOptions | BodyResponseCallback<Schema$Activities>, callback: BodyResponseCallback<Schema$Activities>): void;
        list(params: Params$Resource$Activities$List, callback: BodyResponseCallback<Schema$Activities>): void;
        list(callback: BodyResponseCallback<Schema$Activities>): void;
        /**
         * reports.activities.watch
         * @desc Start receiving notifications for account activities. For more information, see Receiving Push Notifications.
         * @alias reports.activities.watch
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.actorIpAddress The Internet Protocol (IP) Address of host where the event was performed. This is an additional way to filter a report's summary using the IP address of the user whose activity is being reported. This IP address may or may not reflect the user's physical location. For example, the IP address can be the user's proxy server's address or a virtual private network (VPN) address. This parameter supports both IPv4 and IPv6 address versions.
         * @param {string} params.applicationName Application name for which the events are to be retrieved.
         * @param {string=} params.customerId The unique ID of the customer to retrieve data for.
         * @param {string=} params.endTime Sets the end of the range of time shown in the report. The date is in the RFC 3339 format, for example 2010-10-28T10:26:35.000Z. The default value is the approximate time of the API request. An API report has three basic time concepts:   - Date of the API's request for a report: When the API created and retrieved the report.  - Report's start time: The beginning of the timespan shown in the report. The startTime must be before the endTime (if specified) and the current time when the request is made, or the API returns an error.  - Report's end time: The end of the timespan shown in the report. For example, the timespan of events summarized in a report can start in April and end in May. The report itself can be requested in August.  If the endTime is not specified, the report returns all activities from the startTime until the current time or the most recent 180 days if the startTime is more than 180 days in the past.
         * @param {string=} params.eventName The name of the event being queried by the API. Each eventName is related to a specific G Suite service or feature which the API organizes into types of events. An example is the Google Calendar events in the Admin console application's reports. The Calendar Settings type structure has all of the Calendar eventName activities reported by the API. When an administrator changes a Calendar setting, the API reports this activity in the Calendar Settings type and eventName parameters. For more information about eventName query strings and parameters, see the list of event names for various applications above in applicationName.
         * @param {string=} params.filters The filters query string is a comma-separated list. The list is composed of event parameters that are manipulated by relational operators. Event parameters are in the form [parameter1 name][relational operator][parameter1 value],[parameter2 name][relational operator][parameter2 value],...  These event parameters are associated with a specific eventName. An empty report is returned if the filtered request's parameter does not belong to the eventName. For more information about eventName parameters, see the list of event names for various applications above in applicationName.  In the following Admin Activity example, the <> operator is URL-encoded in the request's query string (%3C%3E): GET...&eventName=CHANGE_CALENDAR_SETTING &filters=NEW_VALUE%3C%3EREAD_ONLY_ACCESS  In the following Drive example, the list can be a view or edit event's doc_id parameter with a value that is manipulated by an 'equal to' (==) or 'not equal to' (<>) relational operator. In the first example, the report returns each edited document's doc_id. In the second example, the report returns each viewed document's doc_id that equals the value 12345 and does not return any viewed document's which have a doc_id value of 98765. The <> operator is URL-encoded in the request's query string (%3C%3E):  GET...&eventName=edit&filters=doc_id GET...&eventName=view&filters=doc_id==12345,doc_id%3C%3E98765  The relational operators include:   - == - 'equal to'.  - <> - 'not equal to'. It is URL-encoded (%3C%3E).  - < - 'less than'. It is URL-encoded (%3C).  - <= - 'less than or equal to'. It is URL-encoded (%3C=).  - > - 'greater than'. It is URL-encoded (%3E).  - >= - 'greater than or equal to'. It is URL-encoded (%3E=).   Note: The API doesn't accept multiple values of a parameter. If a particular parameter is supplied more than once in the API request, the API only accepts the last value of that request parameter. In addition, if an invalid request parameter is supplied in the API request, the API ignores that request parameter and returns the response corresponding to the remaining valid request parameters. If no parameters are requested, all parameters are returned.
         * @param {integer=} params.maxResults Determines how many activity records are shown on each response page. For example, if the request sets maxResults=1 and the report has two activities, the report has two pages. The response's nextPageToken property has the token to the second page. The maxResults query string is optional in the request. The default value is 1000.
         * @param {string=} params.orgUnitID ID of the organizational unit to report on. Activity records will be shown only for users who belong to the specified organizational unit. Data before Dec 17, 2018 doesn't appear in the filtered results.
         * @param {string=} params.pageToken The token to specify next page. A report with multiple pages has a nextPageToken property in the response. In your follow-on request getting the next page of the report, enter the nextPageToken value in the pageToken query string.
         * @param {string=} params.startTime Sets the beginning of the range of time shown in the report. The date is in the RFC 3339 format, for example 2010-10-28T10:26:35.000Z. The report returns all activities from startTime until endTime. The startTime must be before the endTime (if specified) and the current time when the request is made, or the API returns an error.
         * @param {string} params.userKey Represents the profile ID or the user email for which the data should be filtered. Can be all for all information, or userKey for a user's unique G Suite profile ID or their primary email address.
         * @param {().Channel} params.requestBody Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        watch(params?: Params$Resource$Activities$Watch, options?: MethodOptions): GaxiosPromise<Schema$Channel>;
        watch(params: Params$Resource$Activities$Watch, options: MethodOptions | BodyResponseCallback<Schema$Channel>, callback: BodyResponseCallback<Schema$Channel>): void;
        watch(params: Params$Resource$Activities$Watch, callback: BodyResponseCallback<Schema$Channel>): void;
        watch(callback: BodyResponseCallback<Schema$Channel>): void;
    }
    export interface Params$Re