/// <reference types="emscripten" />
export declare type Libzip = ReturnType<typeof makeInterface>;
export declare const makeInterface: (libzip: EmscriptenModule) => {
    readonly HEAP8: Int8Array;
    readonly HEAPU8: Uint8Array;
    SEEK_SET: number;
    SEEK_CUR: number;
    SEEK_END: number;
    ZIP_CHECKCONS: number;
    ZIP_CREATE: number;
    ZIP_EXCL: number;
    ZIP_TRUNCATE: number;
    ZIP_RDONLY: number;
    ZIP_FL_OVERWRITE: number;
    ZIP_OPSYS_DOS: number;
    ZIP_OPSYS_AMIGA: number;
    ZIP_OPSYS_OPENVMS: number;
    ZIP_OPSYS_UNIX: number;
    ZIP_OPSYS_VM_CMS: number;
    ZIP_OPSYS_ATARI_ST: number;
    ZIP_OPSYS_OS_2: number;
    ZIP_OPSYS_MACINTOSH: number;
    ZIP_OPSYS_Z_SYSTEM: number;
    ZIP_OPSYS_CPM: number;
    ZIP_OPSYS_WINDOWS_NTFS: number;
    ZIP_OPSYS_MVS: number;
    ZIP_OPSYS_VSE: number;
    ZIP_OPSYS_ACORN_RISC: number;
    ZIP_OPSYS_VFAT: number;
    ZIP_OPSYS_ALTERNATE_MVS: number;
    ZIP_OPSYS_BEOS: number;
    ZIP_OPSYS_TANDEM: number;
    ZIP_OPSYS_OS_400: number;
    ZIP_OPSYS_OS_X: number;
    ZIP_CM_DEFAULT: number;
    ZIP_CM_STORE: number;
    ZIP_CM_DEFLATE: number;
    uint08S: number;
    uint16S: number;
    uint32S: number;
    uint64S: number;
    malloc: (size: number) => number;
    free: (ptr: number) => void;
    getValue: (ptr: number, type: string, noSafe?: boolean | undefined) => number;
    open: (...args: any[]) => any;
    openFromSource: (...args: any[]) => any;
    close: (...args: any[]) => any;
    discard: (...args: any[]) => any;
    getError: (...args: any[]) => any;
    getName: (...args: any[]) => any;
    getNumEntries: (...args: any[]) => any;
    stat: (...args: any[]) => any;
    statIndex: (...args: any[]) => any;
    fopen: (...args: any[]) => any;
    fopenIndex: (...args: any[]) => any;
    fread: (...args: any[]) => any;
    fclose: (...args: any[]) => any;
    dir: {
        add: (...args: any[]) => any;
    };
    file: {
        add: (...args: any[]) => any;
        getError: (...args: any[]) => any;
        getExternalAttributes: (...args: any[]) => any;
        setExternalAttributes: (...args: any[]) => any;
        setMtime: (...args: any[]) => any;
        setCompression: (...args: any[]) => any;
    };
    ext: {
        countSymlinks: (...args: any[]) => any;
    };
    error: {
        initWithCode: (...args: any[]) => any;
        strerror: (...args: any[]) => any;
    };
    name: {
        locate: (...args: any[]) => any;
    };
    source: {
        fromUnattachedBuffer: (...args: any[]) => any;
        fromBuffer: (...args: any[]) => any;
        free: (...args: any[]) => any;
        keep: (...args: any[]) => any;
        open: (...args: any[]) => any;
        close: (...args: any[]) => any;
        seek: (...args: any[]) => any;
        tell: (...args: any[]) => any;
        read: (...args: any[]) => any;
        error: (...args: any[]) => any;
        setMtime: (...args: any[]) => any;
    };
    struct: {
        stat: (...args: any[]) => any;
        statS: (...args: any[]) => any;
        statName: (...args: any[]) => any;
        statIndex: (...args: any[]) => any;
        statSize: (...args: any[]) => any;
        statMtime: (...args: any[]) => any;
        error: (...args: any[]) => any;
        errorS: (...args: any[]) => any;
    };
};
